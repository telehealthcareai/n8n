name: CI

env:
  # SUGAR
  CELERY_FLOWER_USER: debug
  CELERY_FLOWER_PASSWORD: debug
  CELERY_BROKER_URL: redis://localhost:6379/0
  CELERY_FLOWER_PORT: 2555
  DATABASE_URL: postgres://debug:debug@localhost:25432/mhai_web
  DJANGO_SETTINGS_MODULE: config.settings.dev
  DJANGO_SECRET_KEY: 1NeLi0lQveM9nZ9bkfoWwRKReojo1FKvtBI6nXSUUvGAMYP4kvXEGLH8snpM52sJ
  DJANGO_ADMIN_URL: Qpqnghk9LNJCAhEnfwb8WZmU030MmIiF/
  DJANGO_ALLOWED_HOSTS: .mhai.com
  DJANGO_SECURE_SSL_REDIRECT: False
  DJANGO_SERVER_EMAIL: test@mymhai.com
  DJANGO_ACCOUNT_ALLOW_REGISTRATION: True
  SENTRY_DSN:
  REDIS_URL: redis://redis:6379/0
  WEB_CONCURRENCY: 4
  SUGAR_GROUP: dev
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 25432
  POSTGRES_DB: mhai_web
  POSTGRES_USER: debug
  POSTGRES_PASSWORD: debug
  USE_DOCKER: yes
  IPYTHONDIR: /app/.ipython
  DOCKER_BUILDKIT: 0
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

on:
  pull_request:
    branches: ["main"]

  push:
    branches: ["master", "main"]

jobs:
  check-branch:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: check-pr-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if the PR's branch is updated
        uses: osl-incubator/gh-check-pr-is-updated@1.0.0
        with:
          remote_branch: origin/main
          pr_sha: ${{ github.event.pull_request.head.sha }}
  linter:
    runs-on: ubuntu-latest

    concurrency:
      group: ci-linter-${{ github.ref }}
      cancel-in-progress: true

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Create environment variables files
        run: |
          export HOST_UID=$(id -u)
          export HOST_GID=$(id -g)
          pushd .envs
          envsubst < .env.tpl > .env
          envsubst < .django.tpl > .django
          envsubst < .postgres.tpl > .postgres
          popd

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          environment-file: conda/dev.yaml
          channels: conda-forge,nodefaults
          activate-environment: mhai-web
          auto-update-conda: true
          conda-solver: libmamba

      - name: Install dependencies
        run: |
          poetry check
          poetry config virtualenvs.create false
          poetry install

      - name: Linter
        run: |
          pre-commit install
          pre-commit run --all-files

  test:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write
      actions: read

    concurrency:
      group: ci-tests-${{ github.ref }}
      cancel-in-progress: true

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Create environment variables files
        run: |
          export HOST_UID=$(id -u)
          export HOST_GID=$(id -g)
          pushd .envs
          envsubst < .env.tpl > .env
          envsubst < .django.tpl > .django
          envsubst < .postgres.tpl > .postgres
          popd

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          environment-file: conda/dev.yaml
          channels: conda-forge,nodefaults
          activate-environment: mhai-web
          auto-update-conda: true
          conda-solver: libmamba

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry check
          poetry install

      - name: Build the Stack
        run: sugar compose build

      - name: Containers configuration
        run: sugar compose config

      - name: Start Postgres Service
        run: sugar compose-ext restart --services postgres --options "-d"

      - name: Migrate containers
        run: makim django.migrate

      - name: Check migration files
        if: ${{ success() || failure() }}
        run: makim --verbose django.makemigrations --check

      - name: Run tests
        run: makim --verbose tests.unit --append

      - name: Generate logs
        if: ${{ failure() }}
        run: |
          sugar compose logs --all > /tmp/containers-services.log

      - name: Set coverage report
        id: parse-coverage-report
        run: |
          COVERAGE_REPORT=$(makim tests.cov-report)
          COVERAGE_PERCENTAGE=$(echo $COVERAGE_REPORT | grep -oP "TOTAL.* \K(\d{1,3})%")
          COVERAGE_PERCENTAGE=${COVERAGE_PERCENTAGE%?}
          STATE=$(if ((COVERAGE_PERCENTAGE<50)); then echo "critical"; elif ((50<=COVERAGE_PERCENTAGE && COVERAGE_PERCENTAGE<=74)); then echo "yellow"; elif ((75<=COVERAGE_PERCENTAGE)); then echo "success"; fi)
          COVERAGE_REPORT="${COVERAGE_REPORT//'%'/'%25'}"
          COVERAGE_REPORT="${COVERAGE_REPORT//$'\n'/'%0A'}"
          COVERAGE_REPORT="${COVERAGE_REPORT//$'\r'/'%0D'}"
          DABGE="https://img.shields.io/static/v1?label=Code%20Coverage&message=${COVERAGE_PERCENTAGE}%&color=${STATE}"
          echo "::set-output name=COVERAGE_REPORT::$COVERAGE_REPORT"
          echo "::set-output name=DABGE::$DABGE"

      - uses: mshick/add-pr-comment@v1
        with:
          message: |
            ![Code Coverage](${{ steps.parse-coverage-report.outputs.DABGE }})
            ```
            ${{ steps.parse-coverage-report.outputs.COVERAGE_REPORT }}
            ```
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: "github-actions[bot]"

      - name: Archive log artifacts
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: test-containers-services
          path: /tmp/containers-services.log

      - name: Setup tmate session
        if: "${{ failure() && (contains(github.event.pull_request.labels.*.name, 'ci:enable-debugging')) }}"
        uses: mxschmitt/action-tmate@v3

      - name: Stop services
        run: |
          sugar compose stop
          sugar compose down --options --volumes

  containers:
    strategy:
      fail-fast: false
      matrix:
        django_settings:
          - "config.settings.dev"
          - "config.settings.prod"

    runs-on: ubuntu-latest

    concurrency:
      group: ci-containers-${{ matrix.django_settings }}-${{ github.ref }}
      cancel-in-progress: true

    defaults:
      run:
        shell: bash -l {0}

    env:
      DJANGO_SETTINGS_MODULE: ${{ matrix.django_settings }}

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Create environment variables files
        run: |
          export HOST_UID=$(id -u)
          export HOST_GID=$(id -g)
          pushd .envs
          envsubst < .env.tpl > .env
          envsubst < .django.tpl > .django
          envsubst < .postgres.tpl > .postgres
          popd

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          environment-file: conda/dev.yaml
          channels: conda-forge,nodefaults
          activate-environment: mhai-web
          auto-update-conda: true
          conda-solver: libmamba

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Build the Stack
        run: sugar compose build

      - name: Containers configuration
        run: sugar compose config

      - name: Start Postgres Service
        run: sugar compose-ext restart --services postgres --options "-d"

      - name: Migrate containers
        run: makim django.migrate

      - name: Generate logs
        if: ${{ failure() }}
        run: |
          sugar compose logs --all > /tmp/containers-services.log

      # - name: Set coverage report
      #   id: parse-coverage-report
      #   run: |
      #       COVERAGE_REPORT=$(makim tests.coverage-report)
      #       COVERAGE_PERCENTAGE=$(echo $COVERAGE_REPORT | grep -oP "TOTAL.* \K(\d{1,3})%")
      #       COVERAGE_PERCENTAGE=${COVERAGE_PERCENTAGE%?}
      #       STATE=$(if ((COVERAGE_PERCENTAGE<50)); then echo "critical"; elif ((50<=COVERAGE_PERCENTAGE && COVERAGE_PERCENTAGE<=74)); then echo "yellow"; elif ((75<=COVERAGE_PERCENTAGE)); then echo "success"; fi)
      #       COVERAGE_REPORT="${COVERAGE_REPORT//'%'/'%25'}"
      #       COVERAGE_REPORT="${COVERAGE_REPORT//$'\n'/'%0A'}"
      #       COVERAGE_REPORT="${COVERAGE_REPORT//$'\r'/'%0D'}"
      #       DABGE="https://img.shields.io/static/v1?label=Code%20Coverage&message=${COVERAGE_PERCENTAGE}%&color=${STATE}"
      #       echo "::set-output name=COVERAGE_REPORT::$COVERAGE_REPORT"
      #       echo "::set-output name=DABGE::$DABGE"

      # - uses: mshick/add-pr-comment@v1
      #   with:
      #     message: |
      #       ![Code Coverage](${{ steps.parse-coverage-report.outputs.DABGE }})
      #       ```
      #       ${{ steps.parse-coverage-report.outputs.COVERAGE_REPORT }}
      #       ```
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-token-user-login: 'github-actions[bot]'

      - name: Archive log artifacts
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: test-containers-services
          path: /tmp/containers-services.log

      - name: Setup tmate session
        if: "${{ failure() && (contains(github.event.pull_request.labels.*.name, 'ci:enable-debugging')) }}"
        uses: mxschmitt/action-tmate@v3

      - name: Stop services
        run: |
          sugar compose stop
          sugar compose down --options --volumes
